package com.grandmagic.readingmate.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grandmagic.readingmate.bean.db.BookComment;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_COMMENT".
*/
public class BookCommentDao extends AbstractDao<BookComment, Long> {

    public static final String TABLENAME = "BOOK_COMMENT";

    /**
     * Properties of entity BookComment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Bookid = new Property(1, String.class, "bookid", false, "BOOKID");
        public final static Property Score = new Property(2, int.class, "score", false, "SCORE");
        public final static Property Comment_content = new Property(3, String.class, "comment_content", false, "COMMENT_CONTENT");
    }


    public BookCommentDao(DaoConfig config) {
        super(config);
    }
    
    public BookCommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_COMMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"BOOKID\" TEXT UNIQUE ," + // 1: bookid
                "\"SCORE\" INTEGER NOT NULL ," + // 2: score
                "\"COMMENT_CONTENT\" TEXT);"); // 3: comment_content
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_COMMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookComment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String bookid = entity.getBookid();
        if (bookid != null) {
            stmt.bindString(2, bookid);
        }
        stmt.bindLong(3, entity.getScore());
 
        String comment_content = entity.getComment_content();
        if (comment_content != null) {
            stmt.bindString(4, comment_content);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookComment entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String bookid = entity.getBookid();
        if (bookid != null) {
            stmt.bindString(2, bookid);
        }
        stmt.bindLong(3, entity.getScore());
 
        String comment_content = entity.getComment_content();
        if (comment_content != null) {
            stmt.bindString(4, comment_content);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public BookComment readEntity(Cursor cursor, int offset) {
        BookComment entity = new BookComment( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bookid
            cursor.getInt(offset + 2), // score
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // comment_content
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookComment entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setBookid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setScore(cursor.getInt(offset + 2));
        entity.setComment_content(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(BookComment entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(BookComment entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookComment entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
