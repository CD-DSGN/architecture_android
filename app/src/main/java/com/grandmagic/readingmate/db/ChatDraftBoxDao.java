package com.grandmagic.readingmate.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grandmagic.readingmate.bean.db.ChatTypeConver;
import com.hyphenate.chat.EMMessage.ChatType;

import com.grandmagic.readingmate.bean.db.ChatDraftBox;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_DRAFT_BOX".
*/
public class ChatDraftBoxDao extends AbstractDao<ChatDraftBox, Long> {

    public static final String TABLENAME = "CHAT_DRAFT_BOX";

    /**
     * Properties of entity ChatDraftBox.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Tochatuserid = new Property(1, String.class, "tochatuserid", false, "TOCHATUSERID");
        public final static Property MType = new Property(2, String.class, "mType", false, "M_TYPE");
        public final static Property Txt = new Property(3, String.class, "txt", false, "TXT");
    }

    private final ChatTypeConver mTypeConverter = new ChatTypeConver();

    public ChatDraftBoxDao(DaoConfig config) {
        super(config);
    }
    
    public ChatDraftBoxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_DRAFT_BOX\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TOCHATUSERID\" TEXT UNIQUE ," + // 1: tochatuserid
                "\"M_TYPE\" TEXT," + // 2: mType
                "\"TXT\" TEXT);"); // 3: txt
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_DRAFT_BOX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatDraftBox entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tochatuserid = entity.getTochatuserid();
        if (tochatuserid != null) {
            stmt.bindString(2, tochatuserid);
        }
 
        ChatType mType = entity.getMType();
        if (mType != null) {
            stmt.bindString(3, mTypeConverter.convertToDatabaseValue(mType));
        }
 
        String txt = entity.getTxt();
        if (txt != null) {
            stmt.bindString(4, txt);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatDraftBox entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String tochatuserid = entity.getTochatuserid();
        if (tochatuserid != null) {
            stmt.bindString(2, tochatuserid);
        }
 
        ChatType mType = entity.getMType();
        if (mType != null) {
            stmt.bindString(3, mTypeConverter.convertToDatabaseValue(mType));
        }
 
        String txt = entity.getTxt();
        if (txt != null) {
            stmt.bindString(4, txt);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChatDraftBox readEntity(Cursor cursor, int offset) {
        ChatDraftBox entity = new ChatDraftBox( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tochatuserid
            cursor.isNull(offset + 2) ? null : mTypeConverter.convertToEntityProperty(cursor.getString(offset + 2)), // mType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // txt
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatDraftBox entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTochatuserid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMType(cursor.isNull(offset + 2) ? null : mTypeConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setTxt(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatDraftBox entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatDraftBox entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatDraftBox entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
