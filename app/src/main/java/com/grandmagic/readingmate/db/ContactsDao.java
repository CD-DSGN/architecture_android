package com.grandmagic.readingmate.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grandmagic.readingmate.bean.response.Contacts;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACTS".
*/
public class ContactsDao extends AbstractDao<Contacts, Long> {

    public static final String TABLENAME = "CONTACTS";

    /**
     * Properties of entity Contacts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User_id = new Property(1, int.class, "user_id", false, "USER_ID");
        public final static Property Avatar_native = new Property(2, String.class, "avatar_native", false, "AVATAR_NATIVE");
        public final static Property User_name = new Property(3, String.class, "user_name", false, "USER_NAME");
        public final static Property Needline = new Property(4, boolean.class, "needline", false, "NEEDLINE");
        public final static Property Letter = new Property(5, String.class, "letter", false, "LETTER");
        public final static Property PyName = new Property(6, String.class, "pyName", false, "PY_NAME");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    }


    public ContactsDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_ID\" INTEGER NOT NULL UNIQUE ," + // 1: user_id
                "\"AVATAR_NATIVE\" TEXT," + // 2: avatar_native
                "\"USER_NAME\" TEXT," + // 3: user_name
                "\"NEEDLINE\" INTEGER NOT NULL ," + // 4: needline
                "\"LETTER\" TEXT," + // 5: letter
                "\"PY_NAME\" TEXT," + // 6: pyName
                "\"REMARK\" TEXT);"); // 7: remark
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Contacts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String avatar_native = entity.getAvatar_native();
        if (avatar_native != null) {
            stmt.bindString(3, avatar_native);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
        stmt.bindLong(5, entity.getNeedline() ? 1L: 0L);
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(6, letter);
        }
 
        String pyName = entity.getPyName();
        if (pyName != null) {
            stmt.bindString(7, pyName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Contacts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUser_id());
 
        String avatar_native = entity.getAvatar_native();
        if (avatar_native != null) {
            stmt.bindString(3, avatar_native);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(4, user_name);
        }
        stmt.bindLong(5, entity.getNeedline() ? 1L: 0L);
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(6, letter);
        }
 
        String pyName = entity.getPyName();
        if (pyName != null) {
            stmt.bindString(7, pyName);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Contacts readEntity(Cursor cursor, int offset) {
        Contacts entity = new Contacts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // avatar_native
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_name
            cursor.getShort(offset + 4) != 0, // needline
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // letter
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pyName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Contacts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.getInt(offset + 1));
        entity.setAvatar_native(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNeedline(cursor.getShort(offset + 4) != 0);
        entity.setLetter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPyName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Contacts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Contacts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Contacts entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
