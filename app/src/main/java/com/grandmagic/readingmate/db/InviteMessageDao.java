package com.grandmagic.readingmate.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.grandmagic.readingmate.bean.response.InviteMesageStatusConver;
import com.grandmagic.readingmate.bean.response.InviteMessage.InviteMesageStatus;

import com.grandmagic.readingmate.bean.response.InviteMessage;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INVITE_MESSAGE".
*/
public class InviteMessageDao extends AbstractDao<InviteMessage, Long> {

    public static final String TABLENAME = "INVITE_MESSAGE";

    /**
     * Properties of entity InviteMessage.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property From = new Property(0, String.class, "from", false, "FROM");
        public final static Property Time = new Property(1, long.class, "time", false, "TIME");
        public final static Property Reason = new Property(2, String.class, "reason", false, "REASON");
        public final static Property Status = new Property(3, String.class, "status", false, "STATUS");
        public final static Property GroupId = new Property(4, String.class, "groupId", false, "GROUP_ID");
        public final static Property GroupName = new Property(5, String.class, "groupName", false, "GROUP_NAME");
        public final static Property GroupInviter = new Property(6, String.class, "groupInviter", false, "GROUP_INVITER");
        public final static Property Isread = new Property(7, int.class, "isread", false, "ISREAD");
        public final static Property Id = new Property(8, Long.class, "id", true, "_id");
    }

    private final InviteMesageStatusConver statusConverter = new InviteMesageStatusConver();

    public InviteMessageDao(DaoConfig config) {
        super(config);
    }
    
    public InviteMessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INVITE_MESSAGE\" (" + //
                "\"FROM\" TEXT," + // 0: from
                "\"TIME\" INTEGER NOT NULL ," + // 1: time
                "\"REASON\" TEXT," + // 2: reason
                "\"STATUS\" TEXT," + // 3: status
                "\"GROUP_ID\" TEXT," + // 4: groupId
                "\"GROUP_NAME\" TEXT," + // 5: groupName
                "\"GROUP_INVITER\" TEXT," + // 6: groupInviter
                "\"ISREAD\" INTEGER NOT NULL ," + // 7: isread
                "\"_id\" INTEGER PRIMARY KEY );"); // 8: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INVITE_MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InviteMessage entity) {
        stmt.clearBindings();
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(1, from);
        }
        stmt.bindLong(2, entity.getTime());
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(3, reason);
        }
 
        InviteMesageStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, statusConverter.convertToDatabaseValue(status));
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(5, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(6, groupName);
        }
 
        String groupInviter = entity.getGroupInviter();
        if (groupInviter != null) {
            stmt.bindString(7, groupInviter);
        }
        stmt.bindLong(8, entity.getIsread());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(9, id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InviteMessage entity) {
        stmt.clearBindings();
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(1, from);
        }
        stmt.bindLong(2, entity.getTime());
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(3, reason);
        }
 
        InviteMesageStatus status = entity.getStatus();
        if (status != null) {
            stmt.bindString(4, statusConverter.convertToDatabaseValue(status));
        }
 
        String groupId = entity.getGroupId();
        if (groupId != null) {
            stmt.bindString(5, groupId);
        }
 
        String groupName = entity.getGroupName();
        if (groupName != null) {
            stmt.bindString(6, groupName);
        }
 
        String groupInviter = entity.getGroupInviter();
        if (groupInviter != null) {
            stmt.bindString(7, groupInviter);
        }
        stmt.bindLong(8, entity.getIsread());
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(9, id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8);
    }    

    @Override
    public InviteMessage readEntity(Cursor cursor, int offset) {
        InviteMessage entity = new InviteMessage( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // from
            cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // reason
            cursor.isNull(offset + 3) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 3)), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // groupId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // groupName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // groupInviter
            cursor.getInt(offset + 7), // isread
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InviteMessage entity, int offset) {
        entity.setFrom(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTime(cursor.getLong(offset + 1));
        entity.setReason(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStatus(cursor.isNull(offset + 3) ? null : statusConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setGroupId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGroupName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroupInviter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIsread(cursor.getInt(offset + 7));
        entity.setId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InviteMessage entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InviteMessage entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InviteMessage entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
